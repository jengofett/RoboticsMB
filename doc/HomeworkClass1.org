#+TITLE: Class 1 Homework
#+AUTHOR: Maurice Ling
#+DATE: 2015-07-07

* Notes on Doing Class Homework
  Class homework reinforces what we covered in class and prepare you
  for the next class.  If you have not setup GitHub, please follow the
  instructions in the [[http://htmlpreview.github.com?https://github.com/mcli/RoboticsMB/blob/master/doc/RoboticsMB_Reference.html][RoboticsMB Reference]] guide.

  After each step, remember to commit all your source code using
  GitHub after each exercise and synchronize to push your changes to
  the server.  This way I can track your progress and help out if you
  encounter any problems.

  If you are stuck for more than half an hour on a programming issue,
  send me an email or text and I will take a look at your program on
  GitHub.  You will need to commit and push (synchronize) your changes
  to GitHub so I can see your code.

  Send me an email if you are done with all the homework or if you have
  any questions.

* Class 1 Exercises
  These are exercises we started in class.  I've made some additions, 
  so read through all the steps and do the ones that you haven't done yet.
  There are hints in the [[https://github.com/mcli/RoboticsMB/blob/master/doc/RMB_Session1.pdf][class slides]].
** Blink variations
  1. Upload the Blink Example to your board (Examples → 01.Basics)
  2. Save the pin number (13) in an “int” variable and replace all
     instances of “13” with the variable. e.g. int ledPin=13;
  3. Modify the program to generate the SOS signal – 3 short, 3 long,
     3 short, pause, then repeat.
  4. Save the program as BlinkSOS and commit using github client
  5. Revise the program to add 2 functions, shortBlinks() and
     longBlinks(), to generate the SOS signal to make the program
     shorter and more readable.
  6. Save the program again and commit using github client
  7. Revise the program to use one function instead of two (combine
     shortBlinks() and longBlinks() into one).
  8. Save, commit, and synchronize to push your code to GitHub


** Accelerometer Exercise
   This exercise assumes you have set up Github and the Arduino IDE
   following the RoboticsMB Reference guide (Those without GitHub access can
   import the [[https://sites.google.com/a/rocketbrandstudios.com/rocket-brand-studios/tutorials/tutorials-lmr-tadpole-main/microM.zip?attredirects%3D0][microM library]] into their Arduino IDE).
   1. Load the MicroM example “impact”: Files →libraries → microM → impact 
   2. Open the Serial Monitor: Tools → Serial Monitor (or click on
      icon on top right)
   3. Run program, then tap the board lightly from different
      directions to see the delta values change
   4. Save the program into your sketches
   5. Modify the program to print the x, y, and z axis readings (not
      the delta readings).  This will cause a lot of information to show to 
      the screen.
   6. Turn the board in different directions and observe the readings.
   7. Commit all your source code using GitHub after each exercise and
     synchronize to push your changes to the server.
* Put Together Robot
  Put together your robot following the instructions on [[http://www.instructables.com/id/Rocket-Brand-Studios-Tadpole-Robot/][instructables.com]].
  There are variations of the Tadpole.  Ours is the Educational version
  with MicroMagician.
  *Note* Our robot does not include the bumper switches mentioned in the instructions.
* Calibrate Robot
  Follow the [[https://sites.google.com/a/rocketbrandstudios.com/rocket-brand-studios/tutorials/tadpole-tutorials-microm][tutorials at RocketBrandStudios]] to program and calibrate the motors:
  1. [[https://sites.google.com/a/rocketbrandstudios.com/rocket-brand-studios/tutorials/tutorials-tadpole-main/tadpole-tutorials-which-motor-is-which][Figure out which motor is which.]]
  2. [[https://sites.google.com/a/rocketbrandstudios.com/rocket-brand-studios/tutorials/tutorials-tadpole-main/tadpole-tutorials-motor-speed-and-go-straight][Calibrate the robot to go straight.]]
  3. Commit all your source code using GitHub after each exercise and
     synchronize to push your changes to the server.
* Connecting the IR Remote
  1. With a Sony or universal remote control, make a copy of the
     *microM->IR Receiver* project and use it to determine what codes correspond
     to which buttons on your remote.
  2. Write the button names/functions and the
     corresponding codes in a table in your engineering notebook.
  3. Program your robot to turn left, right, and go straight using the IR remote 
     control.
  4. Commit your source code using GitHub and synchronize to push your changes to the server.

* Robotics Merit Badge Workbook
  - Fill out Section 1a and b
  - Get your Blue Card signed
